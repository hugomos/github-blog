import Head from 'next/head';
import { GetStaticProps } from 'next';

import React, { useContext } from 'react';
import { useTheme } from 'styled-components';
import { MenuContext } from '@/core/contexts/menuContext';

import { Container, Content, Section } from './styles';

import { Header } from '@/core/components/Header';
import { Menu } from '@/core/components/Menu';
import { Navigation } from '@/core/components/Navigation';

import { SectionTitle } from '@/core/components/SectionTitle';
import { Post } from '@/core/components/Post';

import { HPosts } from '@/core/components/HPosts';
import { VPosts } from '@/core/components/VPosts';

import { Footer } from '@/core/components/Footer';
import { api } from '@/core/lib/axios';
import { IPost } from '../PostDetails';
import { formatDate } from '@/core/shared/utils/formatDate';
import { Spinner } from '@/core/components/Spinner';

export interface IResponse {
  items: IPost[],
}


export const getStaticProps: GetStaticProps = async () => {

  const requestURL = "/search/issues?q=%20repo:hugomos/blog-posts%20label:"

  const mostRelavantsPostsRequest = (await api.get<IResponse>(`${requestURL}most_relevant`)).data
  const latestPublicationsRequest = (await api.get<IResponse>(`${requestURL}latest_publication`)).data

  const mostRelavantsPosts = mostRelavantsPostsRequest.items.map(post => {
    return {
      number: post.number,
      title: post.title,
      body: post.body,
      created_at: formatDate(post.created_at),
      user: {
        login: post.user.login,
        avatar_url: post.user.avatar_url,
      }
    }
  })

  const latestPublications = latestPublicationsRequest.items.map(post => {
    return {
      number: post.number,
      title: post.title,
      body: post.body,
      created_at: formatDate(post.created_at),
      user: {
        login: post.user.login,
        avatar_url: post.user.avatar_url,
      }
    }
  })

  return {
    props: {
      mostRelavantsPosts,
      latestPublications,
    },
    revalidate: 60 * 60 * 24, // 24 hours
  }
}

interface Props {
  mostRelavantsPosts: IPost[],
  latestPublications: IPost[],
}

const Home: React.FC<Props> = ({ latestPublications, mostRelavantsPosts }) => {
  const { isMenuOpen, setIsMenuOpen } = useContext(MenuContext);
  const theme = useTheme()

  if(isMenuOpen){
    return (
      <Container isMenuOpen>
        <Menu setIsMenuOpen={setIsMenuOpen} isMenuOpen/>
      </Container>
    )
  }

  if(!latestPublications.length && !mostRelavantsPosts.length) {
    return (
      <Container isMenuOpen>
        <Header setIsMenuOpen={setIsMenuOpen}/>
        <Content>
          <Spinner />
        </Content>
      </Container>
    )
  }

  return (
    <>
      <Head>
        <title>Home | GitHub Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Container isMenuOpen>
        <Header setIsMenuOpen={setIsMenuOpen} />
        <Navigation />
        <Content>
          <Section id='latest_publications'>
            <SectionTitle barColor={theme.colors.purple}>Ultimas publicações</SectionTitle>
            <VPosts>
              {latestPublications.map(post => (
                <Post key={post.number} post={post} bodyIsVisible={false} imageIsVisible={false}/>
              ))}
            </VPosts>
          </Section>
          
          <Section id='most_relevant'>
            <SectionTitle barColor={theme.colors.pink}>Mais relevantes</SectionTitle>
            <HPosts>
              {mostRelavantsPosts.map(post => (
                <Post key={post.number} post={post}/>
              ))}
            </HPosts>
          </Section>
        </Content>
        <Footer />
      </Container>
    </>
  );
}

export default Home;